---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: home
---
<h1>Self Reflection</h1>
<p>test</p>

<h1>Software Engineering</h1>
<p>This artifact was the final project for CS 320: Software Testing, Automation, and Quality Assurance where the core functionality of a mobile service was developed to accept and manage user input for different components such as contacts and tasks. This project provided a great example of designing easily understood code through the separate classes designed for it. Most importantly, this project provided an opportunity to showcase automation and testing throughout the entire development process to ensure the code was not only error free but also meeting the client’s requirements.</p>
<p>Originally this program was designed in Java, of which I have done the most projects throughout my courses here at SNHU. To showcase experience with other languages, I chose to port it over to C++ while ensuring I maintained that same level of testing throughout the development process. In Java memory is automatically freed up, but in C++ memory management is done manually to offer finer control, making it an important consideration throughout development. This was most evident when working on the service classes as careless calls to the containers would simply make a copy of the vector instead of pointing to the same memory location of the original variables. For the Java version of this artifact, testing was primarily done with unit testing through the JUnit framework. As the name suggests, this framework only works with Java, so to meet similar coverage with the ported version I utilized Catch2, a lightweight and open-source unit testing framework.</p>
<p>Throughout development I focused on meeting the planned course outcomes for this project by demonstrating the ability to use well-founded and innovative techniques, skills, and tools in computing practices for the purpose of implementing computer solutions that deliver value and accomplish industry-specific goals. It also briefly highlighted understanding of algorithmic principles through time complexity through the removal of nodes from the vector. I prioritized showcasing testing, understanding of the clients’ requirements, and readability throughout the enhancement process. The use of C++ header files proved to be especially helpful to separate declarations, making the code even more readable. The enhancements process was not without difficulties as C++ is likely the language I have the least experience with. While not difficult to learn how to utilize, it was my first experience using separate header files and the Catch2 framework. The biggest challenge came from learning memory management practices, particularly when it came to removing objects from the vector. Initial attempts were inefficient as it could potentially have to shift all the remaining elements in the vector, but using the erase-remove idiom, where both the standard erase() and remove() functions are utilized at the same time, the time complexity is greatly reduced by only having to eliminate the elements in one parse. 
</p>

<h1>Algorithms and Data Structures</h1>
<p>The artifact chosen for this enhancement was a continuation of the project chosen for software design and engineering, the final project for CS 320: Software Testing, Automation, and Quality Assurance. This project provided the core functionality of a mobile service to manage inputs of different components of a mobile application such as contacts and tasks. A core component of these programs is the data structures used for the service level classes. With the initial design they utilized an ArrayList and once ported to C++ it utilized a Vector. While this data structure is very efficient for adding new entries too, searching can be slow if the entry is at the back of the structure as it will have to search through every other entry to find it. Based off the requirements for this project to design these services for use as a mobile application, retrieving specific contacts or tasks will be the most utilized feature.</p>
<p>To enhance this artifact, I chose to modify the data structure to one that would be support this searching feature. With the initial implementation with an ArrayList or vector, the time complexity to search for an element would be O(n). With a hash table we’ll calculate a hash value from the unique ID to store the data at. In the case of a collision where both share the same hash, the data is stored in the bucket via a pointer to the next node. Usually, the search will find the initial key for the fastest search, meaning on average we’d have a constant complexity of O(1). In the worst case we’d have to travel through the bucket to find the node, resulting in the complexity of O(n), the same as the vector.</p>
<p>This program also showcased an opportunity to add more features to it. A potentially useful functionality for a mobile service would be the ability to see a list of all the contacts or tasks input, sorted alphabetically. Implementing this feature provided an opportunity to showcase experience with sorting algorithms. As this would be a less frequently used feature, converting the Hash Table to a vector to quick sort would provide a sufficient experience without slowing down the core functionality of searching.</p>
<p>Through this enhancement I’ve met the course outcome of designing and evaluating computing solutions that solve a given problem using algorithmic principles and computer science practices and standards appropriate to its solution while managing the trade-offs involved in design choices. This is best demonstrated in evaluating the most important functionality of the program and choosing the Hash Table that best supports it without trading away too much efficiency for other functions such as adding or removing new parts to the structure. The biggest challenges for this enhancement came from the design portion, having to evaluate which components would be most valuable to pick which data structure would best suffice. Had the alphabetical organization of the structures been a priority, then a structure such as Binary Search Tree may have been a better choice. This has helped improve my experience with the design process and planning before diving into implementation. 
</p>

<h1>Databases</h1>
<p>This artifact was the final project for CS 360: Mobile Architect and Programming. The purpose of this application was to create an android app that would allow the user to store their weight every day, making it easy to view progress on their weight loss journey. The project utilizes an SQLite Database to keep track of the entry date, weight value, and the weight goal the user is aiming for, making it a good opportunity to showcase experience working with databases. Since this project utilizes SQL, it also provided a good opportunity to highlight a security mindset by being prepared for SQL injection attacks.</p>
<p>Initially this artifact did not make great use of queries to allow the user to track their progress. While users could submit and delete entries, they did not have the means to sort it. To improve on this artifact, I allowed the user to sort by date, allowing them to easily see positive or negative trends in their weight loss journey. When selecting the date column, the order that the recycler view is populated with reverses, allowing the user to customize it to their liking, either seeing their journey from the beginning, or seeing the entries with the most recent dates first.</p>
<p>When working with SQL databases, it is incredibly important to be prepared for potentially malicious users trying to inject SQL to their inputs. To prevent this, inputs are parametrized so even if the user did input a SQL query, it would not be performed in the database. To further prevent errors, we’ve also limited the inputs, utilizing a date scroller to ensure the user must enter a valid date, and only allowing for double to be entered for their weight. When working with this database we made extensive use of cursors, so taking proper care to ensure they were always closed after use was important to keep in mind. Another important aspect of this artifact and why it was chosen is due to requiring user permission for more private information, such as sending alerts to the user when they’ve met their weight goal, demonstrating steps to ensure the users privacy. Through these extra steps taken I’ve showcased the final course outcome of developing a security mindset that anticipates adversarial exploits in software architecture and designs to expose potential vulnerabilities, mitigate design flaws, and ensure privacy and enhanced security of data and resources.</p>
<p>While modifying the artifact, the largest struggle came from updating the recycler view to properly display entries without requiring an entire page reload. While modifying the data retrieved from the select queries was relatively easy, having the recycler view adapter be aware of it proved a tad more difficult. After much experimentation, clearing the list before repopulating and then triggering a notification that the data set changed proved effective. This helped improve my knowledge with how the adapter interacts with changes to the data within it.</p>


<h1>Code Review</h1>
<div><video><source src="https://youtu.be/TSCzj6SfTnw"></video></div>
<p><a href="https://youtu.be/TSCzj6SfTnw">Link</a></p>
<div><iframe width="560"
height="315"
src="https://youtu.be/TSCzj6SfTnw"
frameborder="0"
allowfullscreen></iframe></div>